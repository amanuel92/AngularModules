#module / feature 
job form component thats reusable 
Form validation    - create form and validate (reactiveform, formbuilder, formgroup, formcontrol, validaotrs)
API/REST/Async    - gets current options and choices (available positions & locations) to be used in form from back end api (asynchronous)
API/REST/Async     - use api to validate zip code and find matching city/state
API/REST/Async     - make api calls in both method (observables & promises)
API/REST/Async     - creat applicant model with extra properties that are done using internal methohs, and submit to backend
*SASS              -try to convert styling to sass/scss
*AJAX  -try to implement rest/api call using AJAX

#reactive forms 
Reactive forms provide a model-driven approach to handling form inputs whose values change over time. 


need to bring in these imports to create reactive form : 
-ReactiveFormsModule, 

-FormControl
To register a single form control, import the FormControl class 
into your component and create a new instance of the form control to save as a class property.

-FormGroup 
Helps bring together a set of form controls (form fields that are associated with form controls)

-FormBuilder
we'll use to create instance of formgroup that will have a form 
control for each field/input. 

Validator : used to set validation requirements on form controls , use .compose function and pass array of validators
validators.compose([validators.required])

Validation 
once validator added on angular formcontrol, we cam also add on html side for example zipcode field 

steps 
define the form model by FormGroup and FormControl instances in the component's class.

bootstarp 
to give input box nicer look, use bootstrap class 'class="form-control form-control-sm"'

idea : 
http://form.jotformpro.com/form/41662428144958?

reference 
https://dev.to/nileshsanyal/the-comprehensive-guide-to-angular-8-reactive-forms-4i5g
https://devhints.io (for all dev stuff)

other things learned 

***css/styling stuff******
box-sizing CSS property sets how the total width and height of an element is calculated
border-box tells the browser to account for any border and padding in the values you specify for an element's width and height. If you set an element's width to 100 pixels, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements.
On the other hand, when using position: relative or position: absolute, use of box-sizing: content-box allows the positioning values to be relative to the content, and independent of changes to border and padding sizes, which is sometimes desireable.


*****set up stuff*****
//this updates package.json and adds library installed to list of depedencies
npm install --save <lib/other name like bootstrap>

//after installing libraries 
edit angular.json and add path to new library to 
projects->architect->build->
for bootstrap i.e 
node_modules/bootstrap/dist/js/bootstrap.js



400 Bad Request – This means that client-side input fails validation.
401 Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
403 Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
404 Not Found – This indicates that a resource is not found.
500 Internal server error – This is a generic server error. It probably shouldn’t be thrown explicitly.
502 Bad Gateway – This indicates an invalid response from an upstream server.
503 Service Unavailable – This indicates that something unexpected happened on server side (It can be anything like server overload, some parts of the system failed, etc.).


/*
  // Creation
  funcTest() {

    const observable = new Observable(observer => {
    
      for (let i = 0; i < 3; i++) {
        observer.next(i);
      }
    });

    // Usage
    observable.subscribe(value => console.log("this is test:" + value));
  }


  //promises *****************************
  promise.then(onFulfilled, onRejected);
    function onFulfilled(value) {
        // Do something with value...
    }
    function onRejected(error) {
        // Do something with error...
    }

    promise.then(onFulfilled).catch(onRejected);
    function onFulfilled(value) {
        // Do something with value...
    }
    function onRejected(error) {
        // Do something with error...
    }


//Observables*********************
      observable.subscribe(nextFunc, errorFunc);
      function nextFunc(value) {
          // Do something with value...
      }
      function errorFunc(error) {
          // Do something with error...
      }

     observable.subscribe({
        next: nextFunc,
        error: errorFunc
      });
      function nextFunc(value) {
          // Do something with value...
      }
      function errorFunc(error) {
          // Do something with error...
      } 







*/